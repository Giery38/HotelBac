// <auto-generated />
using System;
using Hotel.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Hotel.Data.Migrations.Postgres
{
    [DbContext(typeof(HotelDbContext))]
    [Migration("20240524172105_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BookingEntityGuestEntity", b =>
                {
                    b.Property<Guid>("BookingsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GuestsId")
                        .HasColumnType("uuid");

                    b.HasKey("BookingsId", "GuestsId");

                    b.HasIndex("GuestsId");

                    b.ToTable("BookingEntityGuestEntity");
                });

            modelBuilder.Entity("BookingEntityRoomEntity", b =>
                {
                    b.Property<Guid>("BookingsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomsId")
                        .HasColumnType("uuid");

                    b.HasKey("BookingsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("BookingEntityRoomEntity");
                });

            modelBuilder.Entity("BookingEntityServiceEntity", b =>
                {
                    b.Property<Guid>("BookingsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uuid");

                    b.HasKey("BookingsId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("BookingEntityServiceEntity");
                });

            modelBuilder.Entity("Hotel.Data.Models.Hotel.HotelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("Stars")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("Hotel.Data.Models.Hotel.RoomEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<Guid>("HotelId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ViewId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HotelId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("ViewId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Hotel.Data.Models.Hotel.RoomTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("Hotel.Data.Models.Hotel.RoomViewEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoomViews");
                });

            modelBuilder.Entity("Hotel.Data.Models.Hotel.ServiceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Hotel.Data.Models.Hotel.ServiceTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("Hotel.Data.Models.Users.Common.GenderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Hotel.Data.Models.Users.Common.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("UserEntity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("UserEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Hotel.Data.Models.Users.Common.UserFeedbackEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeedbackTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FeedbackTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Hotel.Data.Models.Users.Common.UserFeedbackTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FeedbackTypes");
                });

            modelBuilder.Entity("Hotel.Data.Models.Users.Guests.BookingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CheckIn")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CheckOut")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Hotel.Data.Models.Users.Staff.PositionTypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PositionTypes");
                });

            modelBuilder.Entity("HotelEntityServiceEntity", b =>
                {
                    b.Property<Guid>("HotelsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uuid");

                    b.HasKey("HotelsId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("HotelEntityServiceEntity");
                });

            modelBuilder.Entity("Hotel.Data.Models.Users.Guests.GuestEntity", b =>
                {
                    b.HasBaseType("Hotel.Data.Models.Users.Common.UserEntity");

                    b.HasDiscriminator().HasValue("GuestEntity");
                });

            modelBuilder.Entity("Hotel.Data.Models.Users.Staff.StaffEntity", b =>
                {
                    b.HasBaseType("Hotel.Data.Models.Users.Common.UserEntity");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.HasIndex("PositionId");

                    b.HasDiscriminator().HasValue("StaffEntity");
                });

            modelBuilder.Entity("BookingEntityGuestEntity", b =>
                {
                    b.HasOne("Hotel.Data.Models.Users.Guests.BookingEntity", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.Data.Models.Users.Guests.GuestEntity", null)
                        .WithMany()
                        .HasForeignKey("GuestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingEntityRoomEntity", b =>
                {
                    b.HasOne("Hotel.Data.Models.Users.Guests.BookingEntity", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.Data.Models.Hotel.RoomEntity", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingEntityServiceEntity", b =>
                {
                    b.HasOne("Hotel.Data.Models.Users.Guests.BookingEntity", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.Data.Models.Hotel.ServiceEntity", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hotel.Data.Models.Hotel.RoomEntity", b =>
                {
                    b.HasOne("Hotel.Data.Models.Hotel.HotelEntity", "Hotel")
                        .WithMany("Rooms")
                        .HasForeignKey("HotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.Data.Models.Hotel.RoomTypeEntity", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.Data.Models.Hotel.RoomViewEntity", "View")
                        .WithMany("Rooms")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");

                    b.Navigation("RoomType");

                    b.Navigation("View");
                });

            modelBuilder.Entity("Hotel.Data.Models.Hotel.ServiceEntity", b =>
                {
                    b.HasOne("Hotel.Data.Models.Hotel.ServiceTypeEntity", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Hotel.Data.Models.Users.Common.UserEntity", b =>
                {
                    b.HasOne("Hotel.Data.Models.Users.Common.GenderEntity", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Hotel.Data.Models.Users.Common.UserFeedbackEntity", b =>
                {
                    b.HasOne("Hotel.Data.Models.Users.Common.UserFeedbackTypeEntity", "FeedbackType")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FeedbackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.Data.Models.Users.Common.UserEntity", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeedbackType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HotelEntityServiceEntity", b =>
                {
                    b.HasOne("Hotel.Data.Models.Hotel.HotelEntity", null)
                        .WithMany()
                        .HasForeignKey("HotelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Hotel.Data.Models.Hotel.ServiceEntity", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Hotel.Data.Models.Users.Staff.StaffEntity", b =>
                {
                    b.HasOne("Hotel.Data.Models.Users.Staff.PositionTypeEntity", "PositionType")
                        .WithMany("Staff")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PositionType");
                });

            modelBuilder.Entity("Hotel.Data.Models.Hotel.HotelEntity", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Hotel.Data.Models.Hotel.RoomTypeEntity", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Hotel.Data.Models.Hotel.RoomViewEntity", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("Hotel.Data.Models.Hotel.ServiceTypeEntity", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("Hotel.Data.Models.Users.Common.GenderEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Hotel.Data.Models.Users.Common.UserEntity", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Hotel.Data.Models.Users.Common.UserFeedbackTypeEntity", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("Hotel.Data.Models.Users.Staff.PositionTypeEntity", b =>
                {
                    b.Navigation("Staff");
                });
#pragma warning restore 612, 618
        }
    }
}
